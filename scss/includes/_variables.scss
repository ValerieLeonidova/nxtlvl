$font: 'Roboto', sans-serif;

$min-aspect169 : "(min-aspect-ratio: 16/9)";
$max-aspect169 : "(max-aspect-ratio: 16/9)";

$gradientFirst: #ff6f29;
$gradientSecond: #ff942a;

$colors_theme : (
        "primary"   : "primary",
        "secondary" : "secondary",
        "dark" : "dark",
        "link" : "link",
        "text" : "text",
        "footer-text" : "footer-text",
        "bg-footer" : "bg-footer",
        "gray" : "gray",
        "bg-body" : "bg-body",
        "bg-content" : "bg-content",
        "bg-header" : "bg-header",
        "border" : "border",
        "black" : "black",
        "white" : "white",
        "green" : "green"
);

$colors : (
        "primary"  : #ff822a,
        "secondary"  : #23262f,
        "dark"  : #252733,
        "link"  : #23262f,
        "text"  : #87878d,
        "footer-text"  : #8b898e,
        "bg-footer"  : #282a36,
        "gray"  : #aaaaaa,
        "bg-body"  : #1d1f26,
        "bg-content"  : #25272d,
        "bg-header"  : #0a1725,
        "border" : #707177,
        "white" : #FFFFFF,
        "black" : #000000,
        "green" : #68cc6c,
);

.color {
  @each $status, $color in $colors {
    &--#{$status} {
      color: $color!important;
    }
  }
}

@function HexToRGB($hex) {
  @return red($hex), green($hex), blue($hex);
}

@function cl($name, $opacity: false) {
  @if $opacity {
    @return rgba(var(--color-#{unquote($name)}--rgb), $opacity);
  } @else {
    @return var(--color-#{unquote($name)});
  }
}

:root{
  @if $colors {
    @if $colors_theme {
      @each $key, $value in $colors_theme {
        --color-#{$key} : var(--color-#{$value});
        --color-#{$key}--rgb : var(--color-#{$value}--rgb);
      }
    }

    @each $key, $value in $colors {
      --color-#{$key} : #{$value};
      --color-#{$key}--rgb : #{HexToRGB($value)};
    }
  }
}